const { extractSheets } = require("./src");

// optional custom format cell function
const formatCell = (sheetTitle, columnTitle, value) => value; //value.toUpperCase();

const stripPrefix = str => (str.includes("|") && str.split("|")[1]) || str;

const criteres = [
  "aéroport paris",
  "agents payés à l'heure",
  "période essai",
  "catégorie socio-professionnelle",
  "personnel de conduite",
  "motif de rupture",
  "durée du travail",
  "temps de travail",
  "durée du préavis",
  "délai de prévenance",
  "type de rupture",
  "conclusion contrat travail",
  "logement",
  "niveau",
  "classe",
  "position",
  "groupe",
  "coefficient",
  "échelon",
  "ancienneté",
  "âge"
];

const extract = () => {
  extractSheets(
    {
      // your google spreadhsheet key
      spreadsheetKey: "1zd_hShEui8BHK0349GpDUZRkCcQ9syIZ9gSrkYKRdo0",
      // your google oauth2 credentials (optional for world-readable spreadsheets)
      credentials: "AIzaSyDG2JSc1SfXvYdUU_Mt1ruh_8m5F_ea6po",
      // optional: names of the sheets you want to extract
      sheetsToExtract: ["heures_recherche_emploi", "paramètres"]
      // optional: custom function to parse the cells
      //formatCell: formatCell
    },
    function(err, data) {
      //console.log("heures_recherche_emploi: ", data.heures_recherche_emploi);
      //console.log("Invoices: ", data.Invoices);

      const byCC = data.heures_recherche_emploi.reduce((a, c) => {
        if (!a[c.IDCC]) {
          a[c.IDCC] = [];
        }
        a[c.IDCC].push(c);
        return a;
      }, {});

      const md = `
# heures recherche d'emploi

    ${Object.keys(byCC)
      .map(key => {
        let mdCc = `## ${key} : ${byCC[key][0].CC}\n\n`;

        byCC[key].forEach(situation => {
          mdCc += "\n";
          mdCc += "\n";
          mdCc += `critere | valeur\n`;
          mdCc += `--------|--------\n`;
          criteres.forEach(critere => {
            if (situation[critere]) {
              mdCc += `${critere} | ${stripPrefix(situation[critere])}\n`;
            }
          });
          mdCc += "\n";
          mdCc += "\n";

          mdCc += "#### réponse 1\n\n";
          mdCc += situation["réponse 1"] || "";
          mdCc += "\n";

          if (situation["réponse 2"]) {
            mdCc += "#### réponse 2\n\n";
            mdCc += situation["réponse 2"];
            mdCc += "\n";
          }

          if (situation["réponse 3"]) {
            mdCc += "#### réponse 3\n\n";
            mdCc += situation["réponse 3"];
            mdCc += "\n";
          }

          mdCc += "\n";

          mdCc += `[${situation["référence juridique"]}](${situation["lien référence juridique"]})`;

          mdCc += "\n\n";
          mdCc += "---";
          mdCc += "\n\n";
        });

        return mdCc;
      })
      .join("\n")}


    `;

      console.log("md", md);
    }
  );
};

const test2 = async () => {
  // extractSheets(
  //   {
  //     // your google spreadhsheet key
  //     spreadsheetKey: "1Xgxfg4hvI2bxNsrppB4IjhtJSAIabeB8DDaCWF2sn50",
  //     // your google oauth2 credentials (optional for world-readable spreadsheets)
  //     credentials: "AIzaSyDG2JSc1SfXvYdUU_Mt1ruh_8m5F_ea6po",
  //     // optional: names of the sheets you want to extract
  //     sheetsToExtract: ["tab hého 1", "tab & TAB"],
  //     // optional: custom function to parse the cells
  //     formatCell: (value, worksheetTitle, title) => {
  //       console.log("xx", value, worksheetTitle, title);
  //       if (title === "col1xxx") {
  //         return parseInt(value, 10);
  //       }
  //       return value;
  //     }
  //   },
  //   function(err, data) {
  //     console.log("data", data);
  //   }
  // );

  const result = await extractSheets({
    // your google spreadhsheet key
    spreadsheetKey: "1Xgxfg4hvI2bxNsrppB4IjhtJSAIabeB8DDaCWF2sn50",
    // your google oauth2 credentials (optional for world-readable spreadsheets)
    credentials: "AIzaSyDG2JSc1SfXvYdUU_Mt1ruh_8m5F_ea6po",
    // optional: names of the sheets you want to extract
    sheetsToExtract: ["tab hého 1", "tab & TAB"],
    // optional: custom function to parse the cells
    formatCell: (value, worksheetTitle, title) => {
      if (title === "col1xxx") {
        return parseInt(value, 10);
      }
      return value;
    }
  });
  console.log("result", result);
};

extract();
